name: "Get Project Item Id"
author: 'Tetsuya Mori'
description: 'Get Project Item Id of GitHub Projects'
branding:
  icon: hash
  color: green
inputs:
  github-token:
    default: ''
    required: true
    description: 'Personal Access Token that with `repo` and `org:read` is granted.'
  project-id:
    default: ''
    required: false
    description: 'Node Id of project.'
  project-owner:
    default: ''
    required: false
    description: 'User/Organization name project contains.'
  project-number:
    default: 0
    required: false
    description: 'The number of the target project.'
  issue-id:
    default: ''
    required: false
    description: 'Node Id of issue.'
  issue-repository:
    default: ''
    required: false
    description: 'Repository name with owner of issue.'
  issue-number:
    default: 0
    required: false
    description: 'Number of issue.'
outputs:
  project-item-id:
    description: 'Project Item Id that can be obtained from a project and issue.'
    value: ${{ steps.get-project-item-id.outputs.project-item-id }}
  error:
    description: 'Error message.'
    value: ${{ steps.get-project-item-id.outputs.error }}
runs:
  using: "composite"
  steps:
    - name: Get Project Id
      uses: monry/actions-get-project-id@v2
      id: get-project-id
      if: inputs.project-id == '' && inputs.project-owner != ''
      with:
        github-token: ${{ inputs.github-token }}
        project-owner: ${{ inputs.project-owner }}
        project-number: ${{ inputs.project-number }}
    - name: Get Issue Id
      uses: monry/actions-get-issue-id@v1
      id: get-issue-id
      if: inputs.issue-id == '' && inputs.issue-repository != ''
      with:
        github-token: ${{ inputs.github-token }}
        issue-repository: ${{ inputs.issue-repository }}
        issue-number: ${{ inputs.issue-number }}
    - name: Get Project Item Id
      uses: actions/github-script@v5
      id: get-project-item-id
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          var projectId = '${{ inputs.project-id }}' || '${{ steps.get-project-id.outputs.project-id }}';
          if (!projectId) {
            core.setOutput('error', 'Project does not found.');
            return;
          }
          var issueId = '${{ inputs.issue-id }}' || '${{ steps.get-issue-id.outputs.issue-id }}';
          if (!issueId) {
            core.setOutput('error', 'Issue does not found.');
            return;
          }

          const variables = {
              projectId: projectId,
              cursor: null
          };
          const query = `
            query($projectId: ID!, $cursor: String) {
              rateLimit {
                cost
                remaining
              }
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, after: $cursor) {
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }
          `;
          let result = {};
          let projectV2ItemId = null;
          try {
            while (result.node.items.pageInfo.hasNextPage) {
              result = await github.graphql(query, variables);
              for (const itemNode of result.node.items.nodes) {
                if (!itemNode || !itemNode.content) {
                  continue;
                }
                if (itemNode.content.id == issueId) {
                  projectV2ItemId = itemNode.id;
                  break;
                }
              }
              if (projectV2ItemId) {
                break;
              }
              variables.cursor = result.node.items.pageInfo.endCursor;
            }
          } catch (error) {
            if (error.data) {
              result = error.data;
            }
          }

          if (!result.node) {
            core.setOutput('error', 'Project does not found.');
            return;
          }

          if (!projectV2ItemId) {
            core.setOutput('error', 'Project Item does not found.');
            return;
          }

          core.setOutput('project-item-id', projectV2ItemId);
          return;
