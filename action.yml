name: "Get Project Item Id"
author: 'Tetsuya Mori'
description: 'Get Project Item Id of GitHub Projects'
branding:
  icon: hash
  color: green
inputs:
  github-token:
    default: ''
    required: true
    description: 'Personal Access Token that with `repo` and `org:read` is granted.'
  project-id:
    default: ''
    required: false
    description: 'Node Id of project.'
  project-owner:
    default: ''
    required: false
    description: 'User/Organization name project contains.'
  project-number:
    default: 0
    required: false
    description: 'The number of the target project.'
  issue-id:
    default: ''
    required: false
    description: 'Node Id of issue.'
  issue-repository:
    default: ''
    required: false
    description: 'Repository name with owner of issue.'
  issue-number:
    default: 0
    required: false
    description: 'Number of issue.'
outputs:
  project-item-id:
    description: 'Project Item Id that can be obtained from a project and issue.'
    value: ${{ steps.get-project-item-id.outputs.result }}
runs:
  using: "composite"
  steps:
    - name: Get Project Id
      uses: monry/actions-get-project-id@develop
      id: get-project-id
      with:
        github-token: ${{ inputs.github-token }}
        project-owner: ${{ inputs.project-owner }}
        project-number: ${{ inputs.project-number }}
    - name: Get Project Item Id
      uses: actions/github-script@v5
      id: get-project-item-id
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          // Cannot use `if` at steps in composite actions, so validate here.
          if ('${{ inputs.issue-id }}'.length == 0 && ${{ inputs.issue-number }} <= 0 && '${{ inputs.issue-repository }}'.length == 0) {
            return '';
          }
          if ('${{ inputs.project-id }}'.length == 0 && '${{ inputs.project-owner }}'.length == 0 && ${{ inputs.project-number }} <= 0) {
            return '';
          }

          var projectId = '${{ inputs.project-id }}' || '${{ steps.get-project-id.outputs.project-id }}';
          if (!projectId) {
            return '';
          }

          const variables = {
              projectId: projectId,
              cursor: null
          };
          const query = `
            query($projectId: ID!, $cursor: String) {
              rateLimit {
                cost
                remaining
              }
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, after: $cursor) {
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                          number
                          repository {
                            nameWithOwner
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          `;
          let result = { node: { items: { pageInfo: { hasNextPage: true, endCursor: null }, nodes: [{ id: null, content: { id: null } }] } } };
          let projectV2ItemId = null;
          while (result.node.items.pageInfo.hasNextPage) {
            result = await github.graphql(query, variables);
            for (const itemNode of result.node.items.nodes) {
              if (!itemNode || !itemNode.content) {
                continue;
              }
              if (
                ('${{ inputs.issue-id }}' && itemNode.content.id == '${{ inputs.issue-id }}') ||
                (${{ inputs.issue-number }} > 0 && '${{ inputs.issue-repository }}' && itemNode.content.number == ${{ inputs.issue-number }} && itemNode.content.repository.nameWithOwner == '${{ inputs.issue-repository }}')
              ) {
                projectV2ItemId = itemNode.id;
                break;
              }
            }
            if (projectV2ItemId) {
              break;
            }
            variables.cursor = result.node.items.pageInfo.endCursor;
          }
          return projectV2ItemId || '';
